@using RepidShare.Entities
@{
    ViewBag.Title = "Login";
    Layout = "~/Views/Shared/_webSiteMasterLayout.cshtml";
}
@model UserLogin
<script src="@Url.Content("~/Scripts/chosen.jquery.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<div class="container">
    <h3>Log in</h3>
    <p>To continue, please login or register</p>
    <div class="row">
        <div class="col-md-6">
            <div class="summry-box padd15">
                <h4>Login</h4>
                @using (Html.BeginForm(new { ReturnUrl = ViewBag.ReturnUrl }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label for="">Username</label>
                        @Html.TextBoxFor(model => model.UserName, new { id = "txtUserName", @class = "form-control required", @maxlength = "128", @size = "60", @value = "" })
                        @Html.ValidationMessageFor(model => model.UserName)
                    </div>
                    <div class="form-group">
                        <label for="">Password</label>
                        @Html.PasswordFor(model => model.Password, new { id = "txtPassword", @class = "form-control required", @maxlength = "128", @size = "60", @value = "" })
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>
                    <input id="btnSubmit" type="submit" value="login" style="display: none" class="btn  btn-login">

                }
                <div class="row">
                    <div class="col-md-8">
                        <span class="color-login"><a href="/User/ForgotUsername"><p>Forgotten your username?</p></a></span>
                        <span class="color-login"> <a href="/User/ForgotPassword"><p>Forgotten your password?</p></a></span>
                    </div>
                    <div class="col-md-4 text-right">
                        <button type="button" id="btnLogin" class="btn  btn-login">Login <i class="fa fa-chevron-right" aria-hidden="true"></i></button>
                    </div>
                   
                    <div class="clearfix"></div>
                    <div class="col-md-6">
                        <p>Log in with Facebook</p>
                    </div>
                    @*<div class="col-md-6 text-right">
                        <button type="button" class="btn btn-facebook"><i class="fa fa-facebook-official" aria-hidden="true"></i> Login</button>
                    </div>*@
                   
                    <div class="col-md-6 text-right">
                            <fb:login-button class="btn btn-facebook" scope="public_profile,email" onlogin="checkLoginState();"><i class="fa fa-facebook-official" aria-hidden="true"></i> </fb:login-button>
                        </div>
                </div>
            </div>
        </div>
        <div class="margin15 visible-sm visible-xs"></div>
        <div class="col-md-6">
            <div class="summry-box padd15">
                <h4>Not yet registered?</h4>
                <p>You need to be registered to make full use of this website</p>
                <div class="margin15"></div>
                <a class="btn btn-login" href="/User/Register">Register Now <i class="fa fa-chevron-right"></i></a>
            </div>
        </div>
        <div class="clearfix margin20"></div>
    </div>
</div>
<div class="clearfix margin20"></div>
<script>
    // This is called with the results from from FB.getLoginStatus().
    function statusChangeCallback(response) {
        console.log('statusChangeCallback');
        console.log(response);
        // The response object is returned with a status field that lets the
        // app know the current login status of the person.
        // Full docs on the response object can be found in the documentation
        // for FB.getLoginStatus().
        if (response.status === 'connected') {
            // Logged into your app and Facebook.
            testAPI();
        } else if (response.status === 'not_authorized') {
            // The person is logged into Facebook, but not your app.
            document.getElementById('status').innerHTML = 'Please log ' +
              'into this app.';
        } else {
            // The person is not logged into Facebook, so we're not sure if
            // they are logged into this app or not.
            document.getElementById('status').innerHTML = 'Please log ' +
              'into Facebook.';
        }
    }

    // This function is called when someone finishes with the Login
    // Button.  See the onlogin handler attached to it in the sample
    // code below.
    function checkLoginState() {
        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });
    }

    window.fbAsyncInit = function () {
        FB.init({
            appId: '1735527043384226',
            cookie: false,  // enable cookies to allow the server to access
            // the session
            xfbml: true,  // parse social plugins on this page
            version: 'v2.5' // use graph api version 2.5
        });

        // Now that we've initialized the JavaScript SDK, we call
        // FB.getLoginStatus().  This function gets the state of the
        // person visiting this page and can return one of three states to
        // the callback you provide.  They can be:
        //
        // 1. Logged into your app ('connected')
        // 2. Logged into Facebook, but not your app ('not_authorized')
        // 3. Not logged into Facebook and can't tell if they are logged into
        //    your app or not.
        //
        // These three cases are handled in the callback function.

        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });

    };

    // Load the SDK asynchronously
    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));

    // Here we run a very simple test of the Graph API after login is
    // successful.  See statusChangeCallback() for when this call is made.
    function testAPI() {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function (response) {
            console.log('Successful login for: ' + response.name);
            document.getElementById('status').innerHTML =
              'Thanks for logging in, ' + response.name + '!';
        }, { scope: 'public_profile,email' });
    }
</script>
<script type="text/javascript">

    function setFocusToUserNameTextBox() {
        if ($("#txtUserName").val() == "") {
            $("#txtUserName").focus();
        }
    }

    $(document).ready(function () {


        if ('@Model.Message' != null && '@Model.Message' != undefined && '@Model.Message' != "")
            // alert('@Model.Message');

            $('#txtUserName').bind("cut copy paste", function (e) {
                e.preventDefault();
            });

        $('#txtPassword').bind("cut copy paste", function (e) {
            e.preventDefault();
        });

        @*var message = '@Model.Message';
        var messageType = '@Model.MessageType';

        if (message != '' && messageType != '') {

            showMessage("divMessage", messageType, message);
        }*@

        $("#btnLogin").click(function () {

            $("#btnSubmit").click();
            //if ($("#frmLogin").valid()) {

            //    $("#btnSubmit").click();
            //}
            //else {
            //    $("#frmLogin").valid();
            //}
        });

    });

    $(document).keyup(function (e) {
        if (e.keyCode == 13) {
            $("#btnSubmit").click();
        }
    });
</script>

