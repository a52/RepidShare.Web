@model RepidShare.Entities.DocumentResponseDetailModel
@using RepidShare.Utility;
<div class="row">
    @if (Model != null && Model.Questions != null && Model.Questions.Count() > 0)
    {
        if (Model.IsReadOnly)
        { 
        <div class="col-sm-12">
            <div class="ViewTextResponse">@Model.Questions[Model.Index].AnswerDetail</div>
        </div>
        }
        else
        {
        
        @Html.SingleLineTextBoxFor(model => Model.Questions[Model.Index].AnswerDetail, Model.Questions[Model.Index])
        <br />
        @Html.ValidationMessageFor(model => Model.Questions[Model.Index].AnswerDetail)
         
        }
    
        @Html.HiddenFor(model => model.Questions[Model.Index].ResultDetailID, new { Value = Model.Questions[Model.Index].ResultDetailID })
        @Html.HiddenFor(model => model.Questions[Model.Index].QuestionID, new { Value = Model.Questions[Model.Index].QuestionID })
    }
</div>
<div class="row">
    <div id="DivText_@Model.Questions[Model.Index].QuestionID" class="PriceAmtText">
    </div>
</div>


<script>

    var BackTexxt = "__AnswerDetail";

    $("#Questions_@Model.Index" + BackTexxt).focusout(function () {
        testSkill($('#Questions_@Model.Index' + BackTexxt).val(), 'DivText_@Model.Questions[Model.Index].QuestionID');
    })
    $("#Questions_@Model.Index" + BackTexxt).blur(function () {
        testSkill($('#Questions_@Model.Index' + BackTexxt).val(), 'DivText_@Model.Questions[Model.Index].QuestionID');
    })

    $("#Questions_@Model.Index" + BackTexxt).keydown(function (e) {
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return;
        }
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });


    if ('@Model.Questions[Model.Index].AnswerDetail' != '') {
        testSkill($('#Questions_@Model.Index' + BackTexxt).val(), 'DivText_@Model.Questions[Model.Index].QuestionID');
    }

    var iWords = ['Zero', ' One', ' Two', ' Three', ' Four', ' Five', ' Six', ' Seven', ' Eight', ' Nine'];
    var ePlace = ['Ten', ' Eleven', ' Twelve', ' Thirteen', ' Fourteen', ' Fifteen', ' Sixteen', ' Seventeen', ' Eighteen', ' Nineteen'];
    var tensPlace = ['', ' Ten', ' Twenty', ' Thirty', ' Forty', ' Fifty', ' Sixty', ' Seventy', ' Eighty', ' Ninety'];
    var inWords = [];

    var numReversed, inWords, actnumber, i, j;

    function tensComplication() {
        'use strict';
        if (actnumber[i] === 0) {
            inWords[j] = '';
        } else if (actnumber[i] === 1) {
            inWords[j] = ePlace[actnumber[i - 1]];
        } else {
            inWords[j] = tensPlace[actnumber[i]];
        }
    }

    function testSkill(junkVal, outbox) {

        'use strict';
        //var junkVal = document.getElementById(inbox).value;
        junkVal = Math.floor(junkVal);
        var obStr = junkVal.toString();
        numReversed = obStr.split('');
        actnumber = numReversed.reverse();

        if (Number(junkVal) >= 0) {
            //do nothing
        } else {
            window.alert('wrong Number cannot be converted');
            return false;
        }
        if (Number(junkVal) === 0) {
            document.getElementById('container').innerHTML = obStr + '' + 'Rupees Zero Only';
            return false;
        }
        if (actnumber.length > 9) {
            window.alert('Oops!!!! the Number is too big to covertes');
            return false;
        }



        var iWordsLength = numReversed.length;
        var finalWord = '';
        j = 0;
        for (i = 0; i < iWordsLength; i++) {
            switch (i) {
                case 0:
                    if (actnumber[i] === '0' || actnumber[i + 1] === '1') {
                        inWords[j] = '';
                    } else {
                        inWords[j] = iWords[actnumber[i]];
                    }
                    inWords[j] = inWords[j] + ' Only';
                    break;
                case 1:
                    tensComplication();
                    break;
                case 2:
                    if (actnumber[i] === '0') {
                        inWords[j] = '';
                    } else if (actnumber[i - 1] !== '0' && actnumber[i - 2] !== '0') {
                        inWords[j] = iWords[actnumber[i]] + ' Hundred and';
                    } else {
                        inWords[j] = iWords[actnumber[i]] + ' Hundred';
                    }
                    break;
                case 3:
                    if (actnumber[i] === '0' || actnumber[i + 1] === '1') {
                        inWords[j] = '';
                    } else {
                        inWords[j] = iWords[actnumber[i]];
                    }
                    if (actnumber[i + 1] !== '0' || actnumber[i] > '0') {
                        inWords[j] = inWords[j] + ' Thousand';
                    }
                    break;
                case 4:
                    tensComplication();
                    break;
                case 5:
                    if (actnumber[i] === '0' || actnumber[i + 1] === '1') {
                        inWords[j] = '';
                    } else {
                        inWords[j] = iWords[actnumber[i]];
                    }
                    if (actnumber[i + 1] !== '0' || actnumber[i] > '0') {
                        inWords[j] = inWords[j] + ' Lakh';
                    }
                    break;
                case 6:
                    tensComplication();
                    break;
                case 7:
                    if (actnumber[i] === '0' || actnumber[i + 1] === '1') {
                        inWords[j] = '';
                    } else {
                        inWords[j] = iWords[actnumber[i]];
                    }
                    inWords[j] = inWords[j] + ' Crore';
                    break;
                case 8:
                    tensComplication();
                    break;
                default:
                    break;
            }
            j++;
        }


        inWords.reverse();
        for (i = 0; i < inWords.length; i++) {
            finalWord += inWords[i];
        }
        document.getElementById(outbox).innerHTML = '$' + obStr + '  ' + finalWord;
    }
</script>
